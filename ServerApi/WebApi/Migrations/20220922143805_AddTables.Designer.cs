// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Server_Data.Context;

namespace ServerApi.Migrations
{
    [DbContext(typeof(ApplicationDatabaseContext))]
    [Migration("20220922143805_AddTables")]
    partial class AddTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "3.1.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Server_Data.EntityDb.Bayer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Bayer");
                });

            modelBuilder.Entity("Server_Data.EntityDb.Product", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Server_Data.EntityDb.ProvidedProducts", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("integer")
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProvidedProducts");
                });

            modelBuilder.Entity("Server_Data.EntityDb.Sale", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int?>("BuyerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .IsUnicode(false);

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time")
                        .IsUnicode(false);

                    b.Property<int>("TotalAmount")
                        .HasColumnType("integer")
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("Server_Data.EntityDb.SalesData", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductIdAmount")
                        .HasColumnType("integer")
                        .IsUnicode(false);

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("integer")
                        .IsUnicode(false);

                    b.Property<int>("SaleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("SalesData");
                });

            modelBuilder.Entity("Server_Data.EntityDb.SalesPoint", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .IsUnicode(false);

                    b.Property<int>("ProvidedProductsId")
                        .HasColumnType("integer");

                    b.Property<int>("SaleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProvidedProductsId");

                    b.HasIndex("SaleId");

                    b.ToTable("SalesPoint");
                });

            modelBuilder.Entity("Server_Data.EntityDb.ProvidedProducts", b =>
                {
                    b.HasOne("Server_Data.EntityDb.Product", "Product_")
                        .WithMany("ProvidedProducts_")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Server_Data.EntityDb.Sale", b =>
                {
                    b.HasOne("Server_Data.EntityDb.Bayer", "Bayer")
                        .WithMany("SalesIds")
                        .HasForeignKey("BuyerId");
                });

            modelBuilder.Entity("Server_Data.EntityDb.SalesData", b =>
                {
                    b.HasOne("Server_Data.EntityDb.Product", "Product_")
                        .WithMany("SalesData_")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server_Data.EntityDb.Sale", "Sale")
                        .WithMany("SalesDataId")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Server_Data.EntityDb.SalesPoint", b =>
                {
                    b.HasOne("Server_Data.EntityDb.ProvidedProducts", "ProvidedProducts_")
                        .WithMany("SalesPointId")
                        .HasForeignKey("ProvidedProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server_Data.EntityDb.Sale", "Sale")
                        .WithMany("SalesPointId")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
